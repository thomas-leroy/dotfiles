name: Codacy Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '34 22 * * 5'
  workflow_dispatch: {}   # Allow manual triggering from the Actions tab

permissions:
  contents: read

jobs:
  codacy-security-scan:
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read          # required for checkout
      security-events: write  # required to upload SARIF results
      actions: read           # required for SARIF upload in private repositories

    strategy:
      fail-fast: false
      matrix:
        tool: [ "shellcheck", "remark-lint", "yamllint", "psscriptanalyzer" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Prepare a temp directory to store SARIF files outside the repository.
      # This prevents "uncommitted changes" and exit code 13 from the Codacy CLI.
      - name: Prepare SARIF temp dir
        run: echo "SARIF_DIR=${RUNNER_TEMP}/sarif" >> "$GITHUB_ENV"

      - name: Create SARIF dir
        run: mkdir -p "$SARIF_DIR"

      # Detect if there are files relevant for the current tool.
      # If none are found, skip analysis to avoid configuration errors.
      - name: Detect target files (${{ matrix.tool }})
        id: detect
        shell: bash
        run: |
          shopt -s globstar nullglob
          TOOL="${{ matrix.tool }}"
          case "$TOOL" in
            shellcheck)
              FILES=( **/*.sh **/*.bash **/*.zsh )
              ;;
            remark-lint)
              FILES=( **/*.md )
              ;;
            yamllint)
              FILES=( **/*.yml **/*.yaml )
              ;;
            psscriptanalyzer)
              FILES=( **/*.ps1 )
              ;;
            *)
              echo "Unknown tool: $TOOL" >&2
              exit 1
              ;;
          esac

          EXISTING=()
          for f in "${FILES[@]}"; do
            [[ -f "$f" ]] && EXISTING+=( "$f" )
          done

          if (( ${#EXISTING[@]} == 0 )); then
            echo "has_files=false" >> "$GITHUB_OUTPUT"
            echo "No matching files for tool '$TOOL'. Skipping analysis."
          else
            echo "has_files=true" >> "$GITHUB_OUTPUT"
            printf '%s\n' "${EXISTING[@]}" | sed 's/^/ - /'
          fi

      # Run Codacy Analysis CLI only when relevant files exist for this tool.
      # Results are uploaded both to Codacy SaaS (via project token)
      # and to GitHub SARIF for visibility in Security > Code scanning alerts.
      - name: Run Codacy Analysis CLI (${{ matrix.tool }})
        if: steps.detect.outputs.has_files == 'true'
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          tool: ${{ matrix.tool }}
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}   # Needed for Codacy SaaS
          verbose: true
          format: sarif
          output: ${{ env.SARIF_DIR }}/results-${{ matrix.tool }}.sarif
          gh-code-scanning-compat: true
          max-allowed-issues: 2147483647
          upload: true   # Upload results to Codacy SaaS

      # Upload SARIF results to GitHub's Security > Code scanning alerts
      - name: Upload SARIF (${{ matrix.tool }})
        if: steps.detect.outputs.has_files == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_DIR }}/results-${{ matrix.tool }}.sarif
