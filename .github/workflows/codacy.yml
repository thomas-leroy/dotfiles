# This workflow checks out code, runs Codacy Analysis CLI once (like the original,
# non-matrix version that worked for you), uploads results to Codacy SaaS,
# and publishes a SARIF to GitHub Code Scanning.
# Key fix: write SARIF to RUNNER_TEMP to keep the repo clean between steps.

name: Codacy Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]   # must be a subset of the push branches
  schedule:
    - cron: '34 22 * * 5'
  workflow_dispatch: {}     # allow manual runs

permissions:
  contents: read

jobs:
  codacy-security-scan:
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read          # for actions/checkout
      security-events: write  # for github/codeql-action/upload-sarif
      actions: read           # required in private repos by upload-sarif to get the run status

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Choose a SARIF output path OUTSIDE the repository to avoid "uncommitted changes"
      - name: Set SARIF path
        id: sarif
        run: echo "SARIF_FILE=${RUNNER_TEMP}/codacy-results.sarif" >> "$GITHUB_ENV"

      # Execute Codacy Analysis CLI and generate a SARIF output
      # NOTE: Requires a valid Project API Token stored as secret CODACY_PROJECT_TOKEN
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          # Get the token from your Codacy project settings (Project API Token) and store it as a GitHub Actions secret
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: ${{ env.SARIF_FILE }}   # write outside the repo
          format: sarif
          # Adjust severity of non-security issues for GH code scanning
          gh-code-scanning-compat: true
          # Always produce SARIF (hand over failure decision to GitHub side)
          max-allowed-issues: 2147483647
          # Also upload results to Codacy SaaS (keeps your existing Codacy integration intact)
          upload: true
          # If you use a self-hosted Codacy, uncomment and set the base URL:
          # codacy-api-base-url: https://codacy.example.com
          #
          # If you want to strictly restrict which tools run, keep a .codacy.yml in the repo
          # enabling only shellcheck/remark-lint/yamllint/psscriptanalyzer.

      # Upload the SARIF file generated above to GitHub Advanced Security code scanning
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_FILE }}
